/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.monitorhub.view;


import com.monitorhub.model.MonitorDetails;
import com.monitorhub.util.ValidationUtil;
import javax.swing.JOptionPane;
import java.awt.Color; // Import statement for the Color class
import java.util.LinkedList;
import java.util.List;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Prajol
 */
public class MonitorHub extends javax.swing.JFrame {
    
    private java.awt.CardLayout cardLayout;
    private List<MonitorDetails> monitorList;

    /**
     * Creates new form view
     */
    public MonitorHub() {
        initComponents();
        initializeLayout();
        initializeData();
        startProgress();
    }
    
    Color blue = new Color(153,153,255);
    Color black = new Color(0, 0, 0);
    
    
    private void initializeLayout() {
        cardLayout = new java.awt.CardLayout();
        getContentPane().setLayout(cardLayout);

        // Add panels with unique identifiers
        getContentPane().add(loading, "LoadingScreen");
        getContentPane().add(login, "LoginScreen");
        getContentPane().add(main, "MainScreen");

        // Start with the loading screen
        loadScreen("LoadingScreen");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        login = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        usernameTF = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        agreeCB = new javax.swing.JCheckBox();
        passwordTF = new javax.swing.JPasswordField();
        loginBTN = new javax.swing.JButton();
        exitBTN = new javax.swing.JButton();
        forgotBTN = new javax.swing.JButton();
        errorTXT = new javax.swing.JLabel();
        main = new javax.swing.JPanel();
        navPNL = new javax.swing.JPanel();
        aboutusBTN = new javax.swing.JButton();
        homeBTN = new javax.swing.JButton();
        logout = new javax.swing.JButton();
        stocksBTN = new javax.swing.JButton();
        brandsBTN = new javax.swing.JButton();
        salesBTN = new javax.swing.JButton();
        monitorhubLOGO = new javax.swing.JLabel();
        mainnavBG = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        homePNL = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        stocksPNL = new javax.swing.JPanel();
        brandnameCB = new javax.swing.JComboBox<>();
        modelnameCB = new javax.swing.JComboBox<>();
        resolutionCB = new javax.swing.JComboBox<>();
        monitortypeCB = new javax.swing.JComboBox<>();
        stocksTF = new javax.swing.JTextField();
        priceTF = new javax.swing.JTextField();
        deleteBTN = new javax.swing.JButton();
        addBTN = new javax.swing.JButton();
        updateBTN = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        stocksSP = new javax.swing.JScrollPane();
        stocksTBL = new javax.swing.JTable();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        brandsPNL = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        samsungBTN = new javax.swing.JButton();
        lgBTN = new javax.swing.JButton();
        hpBTN = new javax.swing.JButton();
        asusBTN = new javax.swing.JButton();
        msiBTN = new javax.swing.JButton();
        samsungmodelCB = new javax.swing.JComboBox<>();
        lgmodelCB = new javax.swing.JComboBox<>();
        hpmodelCB = new javax.swing.JComboBox<>();
        asusmodelCB = new javax.swing.JComboBox<>();
        msimodelCB = new javax.swing.JComboBox<>();
        modeldetailsPNL = new javax.swing.JPanel();
        modelimgLBL = new javax.swing.JLabel();
        modeltitleLBL = new javax.swing.JLabel();
        specsLBL = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        salesPNL = new javax.swing.JPanel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        aboutusPNL = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        nextpageBTN = new javax.swing.JButton();
        previouspageBTN = new javax.swing.JButton();
        aboutusLBL = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        loading = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        loadingBar = new javax.swing.JProgressBar();
        progressTXT = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        login.setBackground(new java.awt.Color(255, 255, 255));
        login.setMaximumSize(new java.awt.Dimension(900, 580));
        login.setMinimumSize(new java.awt.Dimension(900, 580));
        login.setPreferredSize(new java.awt.Dimension(900, 580));

        jPanel1.setBackground(new java.awt.Color(88, 114, 143));
        jPanel1.setMaximumSize(new java.awt.Dimension(340, 580));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitorhubLOGO.png"))); // NOI18N
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 340, 580));

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/loginnav.png"))); // NOI18N
        jPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 340, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(88, 114, 143));
        jLabel8.setText("MONITOR HUB");

        jPanel2.setBackground(new java.awt.Color(88, 114, 143));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("**ADMIN LOGIN**");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 340, 36));

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/admin.png"))); // NOI18N
        jPanel2.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -4, 340, 40));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        jLabel11.setText("LOGIN WITH THE CREDENTIALS PROVIDED BY THE MONITOR HUB TEAM");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Â© MonitorHub 2024 All rights reserved");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setText("USERNAME");

        usernameTF.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        usernameTF.setForeground(new java.awt.Color(88, 114, 143));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel14.setText("PASSWORD");

        agreeCB.setText("I AGREE WITH THE TERMS AND CONDITIONS.");
        agreeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agreeCBActionPerformed(evt);
            }
        });

        passwordTF.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        passwordTF.setForeground(new java.awt.Color(88, 114, 143));

        loginBTN.setBackground(new java.awt.Color(88, 114, 143));
        loginBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        loginBTN.setForeground(new java.awt.Color(255, 255, 255));
        loginBTN.setText("LOGIN");
        loginBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        loginBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBTNActionPerformed(evt);
            }
        });

        exitBTN.setBackground(new java.awt.Color(204, 204, 204));
        exitBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        exitBTN.setText("EXIT");
        exitBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBTNActionPerformed(evt);
            }
        });

        forgotBTN.setText("Forgot Password??");
        forgotBTN.setContentAreaFilled(false);
        forgotBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        forgotBTN.setFocusPainted(false);
        forgotBTN.setFocusable(false);
        forgotBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        forgotBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forgotBTNActionPerformed(evt);
            }
        });

        errorTXT.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        errorTXT.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout loginLayout = new javax.swing.GroupLayout(login);
        login.setLayout(loginLayout);
        loginLayout.setHorizontalGroup(
            loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginLayout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addGroup(loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(errorTXT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usernameTF)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordTF)
                            .addComponent(agreeCB, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, loginLayout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addComponent(forgotBTN))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, loginLayout.createSequentialGroup()
                                .addComponent(loginBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(90, 90, 90)
                                .addComponent(exitBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(96, 96, 96))
                    .addGroup(loginLayout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        loginLayout.setVerticalGroup(
            loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(loginLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel8)
                .addGap(12, 12, 12)
                .addComponent(jLabel11)
                .addGap(12, 12, 12)
                .addComponent(errorTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel13)
                .addGap(6, 6, 6)
                .addComponent(usernameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel14)
                .addGap(6, 6, 6)
                .addComponent(passwordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(agreeCB)
                .addGap(5, 5, 5)
                .addComponent(forgotBTN)
                .addGap(18, 18, 18)
                .addGroup(loginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loginBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        main.setBackground(new java.awt.Color(255, 255, 255));
        main.setMaximumSize(new java.awt.Dimension(900, 580));
        main.setMinimumSize(new java.awt.Dimension(900, 580));
        main.setPreferredSize(new java.awt.Dimension(900, 580));
        main.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        navPNL.setBackground(new java.awt.Color(88, 114, 143));
        navPNL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        aboutusBTN.setBackground(new java.awt.Color(0, 0, 0));
        aboutusBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        aboutusBTN.setText("About us");
        aboutusBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        aboutusBTN.setBorderPainted(false);
        aboutusBTN.setContentAreaFilled(false);
        aboutusBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        aboutusBTN.setFocusPainted(false);
        aboutusBTN.setFocusable(false);
        aboutusBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutusBTNActionPerformed(evt);
            }
        });
        navPNL.add(aboutusBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, 200, 32));

        homeBTN.setBackground(new java.awt.Color(0, 0, 0));
        homeBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        homeBTN.setForeground(new java.awt.Color(153, 153, 255));
        homeBTN.setText("Home");
        homeBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        homeBTN.setBorderPainted(false);
        homeBTN.setContentAreaFilled(false);
        homeBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homeBTN.setFocusPainted(false);
        homeBTN.setFocusable(false);
        homeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeBTNActionPerformed(evt);
            }
        });
        navPNL.add(homeBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 200, 32));

        logout.setBackground(new java.awt.Color(88, 114, 143));
        logout.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        logout.setForeground(new java.awt.Color(102, 102, 102));
        logout.setText("Log out");
        logout.setBorder(null);
        logout.setBorderPainted(false);
        logout.setContentAreaFilled(false);
        logout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        logout.setFocusPainted(false);
        logout.setFocusable(false);
        logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutActionPerformed(evt);
            }
        });
        navPNL.add(logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 520, 200, 32));

        stocksBTN.setBackground(new java.awt.Color(0, 0, 0));
        stocksBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        stocksBTN.setText("Stocks");
        stocksBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        stocksBTN.setBorderPainted(false);
        stocksBTN.setContentAreaFilled(false);
        stocksBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        stocksBTN.setFocusPainted(false);
        stocksBTN.setFocusable(false);
        stocksBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stocksBTNActionPerformed(evt);
            }
        });
        navPNL.add(stocksBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 260, 200, 32));

        brandsBTN.setBackground(new java.awt.Color(0, 0, 0));
        brandsBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        brandsBTN.setText("Brands");
        brandsBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        brandsBTN.setBorderPainted(false);
        brandsBTN.setContentAreaFilled(false);
        brandsBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        brandsBTN.setFocusPainted(false);
        brandsBTN.setFocusable(false);
        brandsBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandsBTNActionPerformed(evt);
            }
        });
        navPNL.add(brandsBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 200, 32));

        salesBTN.setBackground(new java.awt.Color(0, 0, 0));
        salesBTN.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        salesBTN.setText("Sales");
        salesBTN.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        salesBTN.setBorderPainted(false);
        salesBTN.setContentAreaFilled(false);
        salesBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        salesBTN.setFocusPainted(false);
        salesBTN.setFocusable(false);
        salesBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesBTNActionPerformed(evt);
            }
        });
        navPNL.add(salesBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 360, 200, 32));

        monitorhubLOGO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitorhubLOGO.png"))); // NOI18N
        monitorhubLOGO.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        monitorhubLOGO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                monitorhubLOGOMouseClicked(evt);
            }
        });
        navPNL.add(monitorhubLOGO, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        mainnavBG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/mainnav.png"))); // NOI18N
        navPNL.add(mainnavBG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        main.add(navPNL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Â© MonitorHub 2024 All rights reserved");
        main.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(206, 560, 696, -1));

        homePNL.setBackground(new java.awt.Color(255, 255, 255));
        homePNL.setMaximumSize(new java.awt.Dimension(600, 500));
        homePNL.setMinimumSize(new java.awt.Dimension(600, 500));
        homePNL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/hp4.png"))); // NOI18N
        jLabel20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel20MouseClicked(evt);
            }
        });
        homePNL.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 170, 140));

        jLabel48.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(255, 255, 255));
        jLabel48.setText("HP Omen 34c");
        homePNL.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 390, -1, -1));

        jLabel50.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel50.setForeground(new java.awt.Color(255, 255, 255));
        jLabel50.setText("HP Omen 27k");
        homePNL.add(jLabel50, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 380, -1, -1));

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/hp2.png"))); // NOI18N
        homePNL.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 180, -1, -1));

        jLabel49.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel49.setForeground(new java.awt.Color(255, 255, 255));
        jLabel49.setText("HP Omen 25i");
        homePNL.add(jLabel49, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 390, -1, -1));

        jLabel47.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/hpLOGO.png"))); // NOI18N
        jLabel47.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel47.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel47MouseClicked(evt);
            }
        });
        homePNL.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 430, -1, -1));

        jLabel46.setFont(new java.awt.Font("Verdana", 1, 28)); // NOI18N
        jLabel46.setForeground(new java.awt.Color(255, 255, 255));
        jLabel46.setText("WELCOME TO MONITOR HUB");
        homePNL.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, -1, -1));

        jLabel45.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/hp3.png"))); // NOI18N
        homePNL.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 190, -1, -1));

        jLabel44.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/homeBackground.png"))); // NOI18N
        homePNL.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, -1, -1));

        main.add(homePNL, new org.netbeans.lib.awtextra.AbsoluteConstraints(196, 34, 710, 500));

        stocksPNL.setBackground(new java.awt.Color(255, 255, 255));
        stocksPNL.setMaximumSize(new java.awt.Dimension(600, 500));
        stocksPNL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        brandnameCB.setForeground(new java.awt.Color(88, 114, 143));
        brandnameCB.setMaximumRowCount(5);
        brandnameCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SAMSUNG", "LG", "HP", "ASUS", "MSI" }));
        brandnameCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandnameCBActionPerformed(evt);
            }
        });
        stocksPNL.add(brandnameCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 100, 30));

        modelnameCB.setForeground(new java.awt.Color(88, 114, 143));
        modelnameCB.setMaximumRowCount(25);
        modelnameCB.setToolTipText("");
        stocksPNL.add(modelnameCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 390, 200, 30));

        resolutionCB.setForeground(new java.awt.Color(88, 114, 143));
        resolutionCB.setMaximumRowCount(10);
        resolutionCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "144p", "240p", "360p", "480p", "720p", "1080p", "1440p", "2160p", "4320p" }));
        stocksPNL.add(resolutionCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 450, 100, 30));

        monitortypeCB.setForeground(new java.awt.Color(88, 114, 143));
        monitortypeCB.setMaximumRowCount(5);
        monitortypeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Brand New", "Refurbished", "Returned" }));
        stocksPNL.add(monitortypeCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 390, 100, 30));

        stocksTF.setForeground(new java.awt.Color(88, 114, 143));
        stocksPNL.add(stocksTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 390, 60, 30));

        priceTF.setForeground(new java.awt.Color(88, 114, 143));
        priceTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceTFActionPerformed(evt);
            }
        });
        stocksPNL.add(priceTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 450, 80, 30));

        deleteBTN.setBackground(new java.awt.Color(255, 0, 0));
        deleteBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteBTN.setForeground(new java.awt.Color(255, 255, 255));
        deleteBTN.setText("Delete");
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });
        stocksPNL.add(deleteBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 460, -1, -1));

        addBTN.setBackground(new java.awt.Color(88, 114, 143));
        addBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addBTN.setForeground(new java.awt.Color(255, 255, 255));
        addBTN.setText("Add");
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });
        stocksPNL.add(addBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 460, -1, -1));

        updateBTN.setBackground(new java.awt.Color(88, 114, 143));
        updateBTN.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        updateBTN.setForeground(new java.awt.Color(255, 255, 255));
        updateBTN.setText("Update");
        updateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBTNActionPerformed(evt);
            }
        });
        stocksPNL.add(updateBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 460, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Stocks (Pcs)");
        stocksPNL.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 370, -1, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Price ( In $ )");
        stocksPNL.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 430, -1, -1));

        jLabel43.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(255, 255, 255));
        jLabel43.setText("Resolution");
        stocksPNL.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 430, -1, -1));

        jLabel42.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(255, 255, 255));
        jLabel42.setText("Brand Name");
        stocksPNL.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 370, -1, -1));

        jLabel32.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 255, 255));
        jLabel32.setText("Monitor Type");
        stocksPNL.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 370, -1, -1));

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("Model Name");
        stocksPNL.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 370, -1, -1));

        stocksSP.setBackground(new java.awt.Color(255, 255, 255));

        stocksTBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Brand Name", "Model Name", "Monitor Type", "Stocks", "Resolution", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stocksTBL.getTableHeader().setReorderingAllowed(false);
        stocksSP.setViewportView(stocksTBL);
        if (stocksTBL.getColumnModel().getColumnCount() > 0) {
            stocksTBL.getColumnModel().getColumn(0).setResizable(false);
            stocksTBL.getColumnModel().getColumn(0).setPreferredWidth(60);
            stocksTBL.getColumnModel().getColumn(1).setResizable(false);
            stocksTBL.getColumnModel().getColumn(1).setPreferredWidth(180);
            stocksTBL.getColumnModel().getColumn(2).setResizable(false);
            stocksTBL.getColumnModel().getColumn(2).setPreferredWidth(60);
            stocksTBL.getColumnModel().getColumn(3).setResizable(false);
            stocksTBL.getColumnModel().getColumn(3).setPreferredWidth(55);
            stocksTBL.getColumnModel().getColumn(4).setResizable(false);
            stocksTBL.getColumnModel().getColumn(4).setPreferredWidth(50);
            stocksTBL.getColumnModel().getColumn(5).setResizable(false);
            stocksTBL.getColumnModel().getColumn(5).setPreferredWidth(45);
        }

        stocksPNL.add(stocksSP, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 580, 300));

        jLabel36.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel36.setText("Welcome To Stocks Management Portal");
        stocksPNL.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, -1, -1));

        jLabel37.setForeground(new java.awt.Color(255, 255, 255));
        jLabel37.setText("Use the button below to make changes on stocks. ");
        stocksPNL.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, -1, -1));

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/contenttab.png"))); // NOI18N
        stocksPNL.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        main.add(stocksPNL, new org.netbeans.lib.awtextra.AbsoluteConstraints(256, 34, -1, -1));

        brandsPNL.setBackground(new java.awt.Color(255, 255, 255));
        brandsPNL.setMaximumSize(new java.awt.Dimension(600, 500));
        brandsPNL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel33.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("Welcome To Brands Section");
        brandsPNL.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 600, -1));

        jLabel34.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(255, 255, 255));
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setText("Surf Between Brands To Get Monitor Details.");
        brandsPNL.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 600, -1));

        samsungBTN.setForeground(new java.awt.Color(153, 153, 255));
        samsungBTN.setText("SAMSUNG");
        samsungBTN.setContentAreaFilled(false);
        samsungBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        samsungBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                samsungBTNActionPerformed(evt);
            }
        });
        brandsPNL.add(samsungBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 90, -1));

        lgBTN.setText("LG");
        lgBTN.setContentAreaFilled(false);
        lgBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lgBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgBTNActionPerformed(evt);
            }
        });
        brandsPNL.add(lgBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 50, -1));

        hpBTN.setText("HP");
        hpBTN.setContentAreaFilled(false);
        hpBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hpBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hpBTNActionPerformed(evt);
            }
        });
        brandsPNL.add(hpBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 100, 50, -1));

        asusBTN.setText("ASUS");
        asusBTN.setContentAreaFilled(false);
        asusBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        asusBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asusBTNActionPerformed(evt);
            }
        });
        brandsPNL.add(asusBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 100, 60, -1));

        msiBTN.setText("MSI");
        msiBTN.setContentAreaFilled(false);
        msiBTN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        msiBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msiBTNActionPerformed(evt);
            }
        });
        brandsPNL.add(msiBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 100, 50, -1));

        samsungmodelCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a samsung model", "Samsung Odyssey 3D", "Samsung Odyssey G50D", "Samsung Odyssey G30D", "Samsung Odyssey OLED G8", "Samsung Odyssey Neo G9" }));
        samsungmodelCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                samsungmodelCBActionPerformed(evt);
            }
        });
        brandsPNL.add(samsungmodelCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 240, -1));

        lgmodelCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a lg model", "LG UltraGear 27GX790A (GX7)", "LG UltraGear 34GS95QE", "LG UltraGear 32GS95UE", "LG UltraGear 27GN950", "LG UltraGear 38GN950" }));
        lgmodelCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lgmodelCBActionPerformed(evt);
            }
        });
        brandsPNL.add(lgmodelCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 240, -1));

        hpmodelCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a hp model", "HP Omen Transcend", "HP Omen 27k", "HP Omen 34c", "HP Omen 25i", "HP X32 QHD Gaming Monitor" }));
        hpmodelCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hpmodelCBActionPerformed(evt);
            }
        });
        brandsPNL.add(hpmodelCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 240, -1));

        asusmodelCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select an asus model", "ASUS ROG Swift PG32UQX", "ASUS ROG Swift 360Hz PG259QN", "ASUS TUF Gaming VG27AQ", "ASUS ROG Strix XG49VQ", "ASUS ROG Swift OLED PG42UQ" }));
        asusmodelCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asusmodelCBActionPerformed(evt);
            }
        });
        brandsPNL.add(asusmodelCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 240, -1));

        msimodelCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select a msi model", "MSI MPG 321URX QD-OLED", "MSI MEG 342C QD-OLED", "MSI Optix MAG274QRF-QD", "MSI Optix MPG341CQR" }));
        msimodelCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msimodelCBActionPerformed(evt);
            }
        });
        brandsPNL.add(msimodelCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, 240, -1));

        modeldetailsPNL.setOpaque(false);

        modelimgLBL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        modeltitleLBL.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N

        specsLBL.setForeground(new java.awt.Color(255, 255, 255));
        specsLBL.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout modeldetailsPNLLayout = new javax.swing.GroupLayout(modeldetailsPNL);
        modeldetailsPNL.setLayout(modeldetailsPNLLayout);
        modeldetailsPNLLayout.setHorizontalGroup(
            modeldetailsPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modeldetailsPNLLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(modelimgLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modeldetailsPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modeldetailsPNLLayout.createSequentialGroup()
                        .addComponent(specsLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addComponent(modeltitleLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        modeldetailsPNLLayout.setVerticalGroup(
            modeldetailsPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modeldetailsPNLLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modeldetailsPNLLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(modelimgLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(modeldetailsPNLLayout.createSequentialGroup()
                        .addComponent(modeltitleLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(specsLBL, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)))
                .addContainerGap())
        );

        brandsPNL.add(modeldetailsPNL, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 600, 310));

        jLabel35.setForeground(new java.awt.Color(255, 255, 255));
        jLabel35.setText("Select Model");
        brandsPNL.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 140, -1, -1));

        jLabel26.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/brandsnav.png"))); // NOI18N
        brandsPNL.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 600, -1));

        jLabel27.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/contenttab.png"))); // NOI18N
        brandsPNL.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        main.add(brandsPNL, new org.netbeans.lib.awtextra.AbsoluteConstraints(256, 34, -1, -1));

        salesPNL.setBackground(new java.awt.Color(255, 255, 255));
        salesPNL.setMaximumSize(new java.awt.Dimension(600, 500));
        salesPNL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel38.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/saleschart.png"))); // NOI18N
        salesPNL.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, -1));

        jLabel39.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(255, 255, 255));
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel39.setText("Sales Charts As Of Year 2025");
        salesPNL.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 600, -1));

        jLabel40.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(255, 255, 255));
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel40.setText("Top Brand Of The Year (Per Sales)");
        salesPNL.add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 370, 600, -1));

        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel41.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/hpLOGO.png"))); // NOI18N
        salesPNL.add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, 600, -1));

        jLabel28.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("Welcome To Sales Overview");
        salesPNL.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 600, -1));

        jLabel29.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/contenttab.png"))); // NOI18N
        salesPNL.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        main.add(salesPNL, new org.netbeans.lib.awtextra.AbsoluteConstraints(256, 34, -1, -1));

        aboutusPNL.setBackground(new java.awt.Color(255, 255, 255));
        aboutusPNL.setMaximumSize(new java.awt.Dimension(600, 500));
        aboutusPNL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("About Monitor Hub");
        aboutusPNL.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 600, -1));

        nextpageBTN.setBackground(new java.awt.Color(88, 114, 143));
        nextpageBTN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        nextpageBTN.setForeground(new java.awt.Color(255, 255, 255));
        nextpageBTN.setText("Next Page");
        nextpageBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextpageBTNActionPerformed(evt);
            }
        });
        aboutusPNL.add(nextpageBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 430, -1, 30));

        previouspageBTN.setBackground(new java.awt.Color(88, 114, 143));
        previouspageBTN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        previouspageBTN.setForeground(new java.awt.Color(255, 255, 255));
        previouspageBTN.setText("Previous Page");
        previouspageBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previouspageBTNActionPerformed(evt);
            }
        });
        aboutusPNL.add(previouspageBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 430, -1, 30));

        aboutusLBL.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        aboutusLBL.setForeground(new java.awt.Color(255, 255, 255));
        aboutusLBL.setText("<html> Our Inventory Management System is designed to efficiently handle stocks of monitors<br>  \nfrom various brands, catering to different monitor types and user preferences.<br>  \n<br>  \nAt Monitor Hub, we aim to streamline your inventory processes,<br>  \nproviding accurate tracking and management of large datasets with ease.<br>  \nOur system ensures real-time updates and robust data handling capabilities.<br>  \n<br>  \nWhether you're managing gaming monitors, professional displays,<br>  \nor standard office screens, Monitor Hub has you covered.<br>  \nOur commitment to innovation and efficiency makes us the ideal choice<br>  \nfor businesses and individuals alike.<br>  \n<br>  \nThank you for choosing Monitor Hub â Your trusted partner in monitor inventory management!<br>  \n<html>");
        aboutusPNL.add(aboutusLBL, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 550, 320));

        jLabel31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/contenttab.png"))); // NOI18N
        aboutusPNL.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        main.add(aboutusPNL, new org.netbeans.lib.awtextra.AbsoluteConstraints(256, 34, -1, -1));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prajol Bimali");
        setMinimumSize(new java.awt.Dimension(900, 580));
        setResizable(false);

        loading.setBackground(new java.awt.Color(255, 255, 255));
        loading.setMaximumSize(new java.awt.Dimension(900, 580));
        loading.setMinimumSize(new java.awt.Dimension(900, 580));
        loading.setPreferredSize(new java.awt.Dimension(900, 580));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("MONITOR HUB");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Â© MonitorHub 2024 All rights reserved");

        loadingBar.setBackground(new java.awt.Color(204, 204, 204));
        loadingBar.setForeground(new java.awt.Color(88, 114, 143));
        loadingBar.setBorder(null);
        loadingBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        loadingBar.setMaximumSize(new java.awt.Dimension(146, 4));
        loadingBar.setMinimumSize(new java.awt.Dimension(146, 4));

        progressTXT.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        progressTXT.setForeground(new java.awt.Color(88, 114, 143));
        progressTXT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        progressTXT.setText("Loading Resources");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(88, 114, 143));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("OUR HERO BRANDS");

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/samsungLOGO.png"))); // NOI18N

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/lgLOGO.png"))); // NOI18N

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/hpLOGO.png"))); // NOI18N

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/asusLOGO.png"))); // NOI18N

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitorhubLOGO.png"))); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/msiLOGO.png"))); // NOI18N

        javax.swing.GroupLayout loadingLayout = new javax.swing.GroupLayout(loading);
        loading.setLayout(loadingLayout);
        loadingLayout.setHorizontalGroup(
            loadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(loadingLayout.createSequentialGroup()
                .addGroup(loadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(loadingLayout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addGroup(loadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loadingBar, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(progressTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(loadingLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGap(53, 53, 53)
                .addComponent(jLabel7)
                .addGap(63, 63, 63)
                .addComponent(jLabel1)
                .addGap(61, 61, 61)
                .addComponent(jLabel17)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        loadingLayout.setVerticalGroup(
            loadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadingLayout.createSequentialGroup()
                .addComponent(jLabel18)
                .addGap(11, 11, 11)
                .addComponent(jLabel2)
                .addGap(22, 22, 22)
                .addComponent(loadingBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressTXT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(loadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(loadingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(loading, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agreeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agreeCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_agreeCBActionPerformed

    private void loginBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBTNActionPerformed
        // TODO add your handling code here:
        String username = usernameTF.getText();
        String password = new String(passwordTF.getPassword());

        // Check if the checkbox is selected
        if (!agreeCB.isSelected()) {
            errorTXT.setText("You must agree to the terms and conditions!");
        } 
        // Check if username or password is empty
        else if (username.isEmpty() || password.isEmpty()) {
            errorTXT.setText("Username and Password cannot be EMPTY!!");
        } 
        // Check if username and password are incorrect
        else if (!username.equals("admin") || !password.equals("admin")) {
            errorTXT.setText("Username or Password is INCORRECT!!");
        } 
        // If all conditions are met, proceed to load the main screen
        else {
            errorTXT.setText(""); // Clear any previous error messages
            loadScreen("MainScreen"); // Load the main screen
            
            homePNL.setVisible(true);
            stocksPNL.setVisible(false);
            brandsPNL.setVisible(false);
            salesPNL.setVisible(false);
            aboutusPNL.setVisible(false);
        }
    }//GEN-LAST:event_loginBTNActionPerformed

    private void forgotBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forgotBTNActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(
            this, 
            "You are careless, just try to remember it and try again!\nWe both are helpless.\nBTW both Username and Password are, 'admin' 'admin' respectively.\nHope it helps.ð", 
            "Forgot Password", 
            JOptionPane.WARNING_MESSAGE
        );
        usernameTF.setText("admin");
        passwordTF.setText("admin");
    }//GEN-LAST:event_forgotBTNActionPerformed

    private void exitBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBTNActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBTNActionPerformed

    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutActionPerformed
        // TODO add your handling code here:
        usernameTF.setText(null);
        passwordTF.setText(null);
        agreeCB.setSelected(false);
        
        homePNL.setVisible(true);
        stocksPNL.setVisible(false);
        brandsPNL.setVisible(false);
        salesPNL.setVisible(false);
        aboutusPNL.setVisible(false);
        
        loadScreen("LoginScreen");
        
        stocksBTN.setForeground(black);
        homeBTN.setForeground(blue);
        aboutusBTN.setForeground(black);
        salesBTN.setForeground(black);
        brandsBTN.setForeground(black);
    }//GEN-LAST:event_logoutActionPerformed

    private void homeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeBTNActionPerformed
        // TODO add your handling code here:
        homePNL.setVisible(true);
        stocksPNL.setVisible(false);
        brandsPNL.setVisible(false);
        salesPNL.setVisible(false);
        aboutusPNL.setVisible(false);
        
        stocksBTN.setForeground(black);
        homeBTN.setForeground(blue);
        aboutusBTN.setForeground(black);
        salesBTN.setForeground(black);
        brandsBTN.setForeground(black);
    }//GEN-LAST:event_homeBTNActionPerformed

    private void aboutusBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutusBTNActionPerformed
        // TODO add your handling code here:
        homePNL.setVisible(false);
        stocksPNL.setVisible(false);
        brandsPNL.setVisible(false);
        salesPNL.setVisible(false);
        aboutusPNL.setVisible(true);
        
        stocksBTN.setForeground(black);
        homeBTN.setForeground(black);
        aboutusBTN.setForeground(blue);
        salesBTN.setForeground(black);
        brandsBTN.setForeground(black);
        
        previouspageBTN.setVisible(false);
    }//GEN-LAST:event_aboutusBTNActionPerformed

    private void stocksBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stocksBTNActionPerformed
        // TODO add your handling code here:
        homePNL.setVisible(false);
        stocksPNL.setVisible(true);
        brandsPNL.setVisible(false);
        salesPNL.setVisible(false);
        aboutusPNL.setVisible(false);
        
        stocksBTN.setForeground(blue);
        homeBTN.setForeground(black);
        aboutusBTN.setForeground(black);
        salesBTN.setForeground(black);
        brandsBTN.setForeground(black);
    }//GEN-LAST:event_stocksBTNActionPerformed

    private void brandsBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandsBTNActionPerformed
        // TODO add your handling code here:
        homePNL.setVisible(false);
        stocksPNL.setVisible(false);
        brandsPNL.setVisible(true);
        salesPNL.setVisible(false);
        aboutusPNL.setVisible(false);
        
        stocksBTN.setForeground(black);
        homeBTN.setForeground(black);
        aboutusBTN.setForeground(black);
        salesBTN.setForeground(black);
        brandsBTN.setForeground(blue);

    }//GEN-LAST:event_brandsBTNActionPerformed

    private void salesBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesBTNActionPerformed
        // TODO add your handling code here:
        homePNL.setVisible(false);
        stocksPNL.setVisible(false);
        brandsPNL.setVisible(false);
        salesPNL.setVisible(true);
        aboutusPNL.setVisible(false);
        
        stocksBTN.setForeground(black);
        homeBTN.setForeground(black);
        aboutusBTN.setForeground(black);
        salesBTN.setForeground(blue);
        brandsBTN.setForeground(black);
    }//GEN-LAST:event_salesBTNActionPerformed

    private void brandnameCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandnameCBActionPerformed
        // TODO add your handling code here:
        String selectedBrand = (String) brandnameCB.getSelectedItem();
        modelnameCB.removeAllItems(); // Clear existing items

        // Populate modelnameCB based on the selected brand
        if ("SAMSUNG".equals(selectedBrand)) {
            modelnameCB.addItem("Samsung Odyssey 3D");
            modelnameCB.addItem("Samsung Odyssey G50D");
            modelnameCB.addItem("Samsung Odyssey G30D");
            modelnameCB.addItem("Samsung Odyssey OLED G8");
            modelnameCB.addItem("Samsung Odyssey Neo G9");
        } else if ("LG".equals(selectedBrand)) {
            modelnameCB.addItem("LG UltraGear 27GX790A (GX7)");
            modelnameCB.addItem("LG UltraGear 34GS95QE");
            modelnameCB.addItem("LG UltraGear 32GS95UE");
            modelnameCB.addItem("LG UltraGear 27GN950");
            modelnameCB.addItem("LG UltraGear 38GN950");
        } else if ("HP".equals(selectedBrand)) {
            modelnameCB.addItem("HP Omen Transcend");
            modelnameCB.addItem("HP Omen 27k");
            modelnameCB.addItem("HP Omen 34c");
            modelnameCB.addItem("HP Omen 25i");
            modelnameCB.addItem("HP X32 QHD Gaming Monitor");
        } else if ("ASUS".equals(selectedBrand)) {
            modelnameCB.addItem("ASUS ROG Swift PG32UQX");
            modelnameCB.addItem("ASUS ROG Swift 360Hz PG259QN");
            modelnameCB.addItem("ASUS TUF Gaming VG27AQ");
            modelnameCB.addItem("ASUS ROG Strix XG49VQ");
            modelnameCB.addItem("ASUS ROG Swift OLED PG42UQ");
        } else if ("MSI".equals(selectedBrand)) {
            modelnameCB.addItem("MSI MPG 321URX QD-OLED");
            modelnameCB.addItem("MSI MEG 342C QD-OLED");
            modelnameCB.addItem("MSI Optix MAG274QRF-QD");
            modelnameCB.addItem("MSI Optix MPG341CQR");
        }    
    }//GEN-LAST:event_brandnameCBActionPerformed

    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed
        // TODO add your handling code here:
        String brandName = (String) brandnameCB.getSelectedItem();
        String modelName = (String) modelnameCB.getSelectedItem();
        String monitorType = (String) monitortypeCB.getSelectedItem();
        String stockText = stocksTF.getText();
        String resolution = (String) resolutionCB.getSelectedItem();
        String priceText = priceTF.getText();

        // Validate inputs
        if (!ValidationUtil.validateInputs(brandName, modelName, monitorType, stockText, resolution, priceText)) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields with valid values. Stock and Price must be positive numbers.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        DefaultTableModel model = (DefaultTableModel) stocksTBL.getModel();

        // Check if the model name and monitor type combination already exists
        if (ValidationUtil.modelTypeExists(modelName, monitorType, model)) {
            JOptionPane.showMessageDialog(this, "The selected Model Name and Monitor Type are already listed in the Stock. Please update if needed.", "Duplicate Entry", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Add details to the table (combination does not exist)
        int stock = Integer.parseInt(stockText);
        int price = Integer.parseInt(priceText);

        model.addRow(new Object[]{brandName, modelName, monitorType, stock, resolution, price});
        stocksTF.setText(""); // Clear the stock text field
        priceTF.setText("");  // Clear the price text field

        JOptionPane.showMessageDialog(this, "Stock added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_addBTNActionPerformed

    private void updateBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBTNActionPerformed
        // TODO add your handling code here:
        String brandName = (String) brandnameCB.getSelectedItem();
        String modelName = (String) modelnameCB.getSelectedItem();
        String monitorType = (String) monitortypeCB.getSelectedItem();
        String stockText = stocksTF.getText();
        String resolution = (String) resolutionCB.getSelectedItem();
        String priceText = priceTF.getText();

        DefaultTableModel model = (DefaultTableModel) stocksTBL.getModel();

        
        // Validate inputs
        if (!ValidationUtil.validateInputs(brandName, modelName, monitorType, stockText, resolution, priceText)) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields with valid values. Stock and Price must be positive numbers.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Check if the model name and monitor type combination exists
        if (!ValidationUtil.modelTypeExists(modelName, monitorType, model)) {
            JOptionPane.showMessageDialog(this, "The selected Model Name and Monitor Type are not listed. Please add them first!", "Update Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Perform update operation (only resolution, stock, and price)
        for (int i = 0; i < model.getRowCount(); i++) {
            if (model.getValueAt(i, 1).toString().equalsIgnoreCase(modelName) &&
                model.getValueAt(i, 2).toString().equalsIgnoreCase(monitorType)) {

                model.setValueAt(Integer.valueOf(stockText), i, 3); // Update stock
                model.setValueAt(resolution, i, 4);                 // Update resolution
                model.setValueAt(Integer.valueOf(priceText), i, 5); // Update price

                JOptionPane.showMessageDialog(this, "Stock updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                stocksTF.setText(""); // Clear fields
                priceTF.setText("");
                return; // Exit the loop after updating the first matching row
            }
        }
    }//GEN-LAST:event_updateBTNActionPerformed

    private void lgBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgBTNActionPerformed
        // TODO add your handling code here:
 
        
        samsungBTN.setForeground(black);
        msiBTN.setForeground(black);
        lgBTN.setForeground(blue);
        hpBTN.setForeground(black);
        asusBTN.setForeground(black);
        
        samsungmodelCB.setVisible(false);
        hpmodelCB.setVisible(false);
        lgmodelCB.setVisible(true);
        msimodelCB.setVisible(false);
        asusmodelCB.setVisible(false);
       
    }//GEN-LAST:event_lgBTNActionPerformed

    private void samsungBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_samsungBTNActionPerformed
        // TODO add your handling code here:

        
        samsungBTN.setForeground(blue);
        msiBTN.setForeground(black);
        lgBTN.setForeground(black);
        hpBTN.setForeground(black);
        asusBTN.setForeground(black);
        
        samsungmodelCB.setVisible(true);
        hpmodelCB.setVisible(false);
        lgmodelCB.setVisible(false);
        msimodelCB.setVisible(false);
        asusmodelCB.setVisible(false);
        
        

    }//GEN-LAST:event_samsungBTNActionPerformed

    private void hpBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hpBTNActionPerformed
        // TODO add your handling code here:

        samsungBTN.setForeground(black);
        msiBTN.setForeground(black);
        lgBTN.setForeground(black);
        hpBTN.setForeground(blue);
        asusBTN.setForeground(black);
        
        samsungmodelCB.setVisible(false);
        hpmodelCB.setVisible(true);
        lgmodelCB.setVisible(false);
        msimodelCB.setVisible(false);
        asusmodelCB.setVisible(false);

    }//GEN-LAST:event_hpBTNActionPerformed

    private void asusBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asusBTNActionPerformed
        // TODO add your handling code here:



        samsungBTN.setForeground(black);
        msiBTN.setForeground(black);
        lgBTN.setForeground(black);
        hpBTN.setForeground(black);
        asusBTN.setForeground(blue);
        
        samsungmodelCB.setVisible(false);
        hpmodelCB.setVisible(false);
        lgmodelCB.setVisible(false);
        msimodelCB.setVisible(false);
        asusmodelCB.setVisible(true);
    }//GEN-LAST:event_asusBTNActionPerformed

    private void msiBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msiBTNActionPerformed
        // TODO add your handling code here:
        
        samsungBTN.setForeground(black);
        msiBTN.setForeground(blue);
        lgBTN.setForeground(black);
        hpBTN.setForeground(black);
        asusBTN.setForeground(black);
        
        samsungmodelCB.setVisible(false);
        hpmodelCB.setVisible(false);
        lgmodelCB.setVisible(false);
        msimodelCB.setVisible(true);
        asusmodelCB.setVisible(false);
    }//GEN-LAST:event_msiBTNActionPerformed

    private void samsungmodelCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_samsungmodelCBActionPerformed
        // TODO add your handling code here:
        String selectedModel = (String) samsungmodelCB.getSelectedItem();
        // Show the specific panel based on the selection
        if (selectedModel.equals("Samsung Odyssey 3D")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("Samsung Odyssey 3D");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/samsung1.png")));
            specsLBL.setText("<html> Display Technology: 4K QLED panel for vibrant and sharp visuals. <br> Resolution: 3840 x 2160 pixels with detailed image quality. <br> Refresh Rate: 165Hz for smooth and responsive gameplay.  <br> 3D Technology: Glasses-free 3D with lenticular lens and eye-tracking.  <br> Connectivity: 1 DisplayPort 1.4 and 2 HDMI 2.1 ports for versatility.<br> <html>");
        }
        else if (selectedModel.equals("Samsung Odyssey G50D")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("Samsung Odyssey G50D");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/samsung2.png")));
            specsLBL.setText("<html> Display Technology: VA panel for deep blacks and high contrast. <br> Resolution: Full HD (1920 x 1080) for clear and detailed images. <br> Refresh Rate: 180Hz with 1ms (MPRT) response time for smooth gameplay. <br> Adaptive Sync: Supports AMD FreeSyncâ¢ Premium to reduce screen tearing and stuttering. <br> Ergonomics: Adjustable stand for optimal comfort during extended gaming sessions. <br> <html>");
        }
        else if (selectedModel.equals("Samsung Odyssey G30D")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("Samsung Odyssey G30D");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/samsung3.png")));
            specsLBL.setText("<html> Display Technology: Fast IPS panel for vibrant colors and wide 178Â° viewing angles. <br> Resolution: QHD (2560 x 1440) for sharp and detailed images. <br> Refresh Rate: 180Hz with 1ms (GtG) response time for smooth gameplay. <br> HDR Support: VESA DisplayHDR 400 for richer contrast and brighter visuals. <br> Adaptive Sync: Supports AMD FreeSyncâ¢ to reduce screen tearing and stuttering. <br> <html>");
        }
        else if (selectedModel.equals("Samsung Odyssey OLED G8")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("Samsung Odyssey OLED G8");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/samsung4.png")));
            specsLBL.setText("<html> Display Technology: OLED panel for deep blacks and vibrant colors. <br> Resolution: Ultra WQHD (3440 x 1440) for sharp and detailed images. <br> Refresh Rate: 175Hz with 0.03ms (GtG) response time for ultra-smooth gameplay. <br> HDR Support: VESA DisplayHDR True Black 400 for enhanced contrast and brightness. <br> Adaptive Sync: Supports AMD FreeSyncâ¢ Premium Pro to reduce screen tearing and stuttering. <br> <html>");
        }
        else if (selectedModel.equals("Samsung Odyssey Neo G9")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("Samsung Odyssey Neo G9");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/samsung5.png")));
            specsLBL.setText("<html> Display Technology: Quantum Mini-LED panel with Quantum Matrix Technology for exceptional visual accuracy. <br> Resolution: Dual UHD (7680 x 2160) for ultra-sharp and expansive visuals. <br> Refresh Rate: 240Hz with 1ms (GtG) response time for ultra-smooth gameplay. <br> HDR Support: VESA DisplayHDR 1000 with a 1,000,000:1 contrast ratio for enhanced color and depth. <br> <html>");
        }

    }//GEN-LAST:event_samsungmodelCBActionPerformed

    private void lgmodelCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lgmodelCBActionPerformed
        // TODO add your handling code here:
        
        String selectedModel = (String) lgmodelCB.getSelectedItem();
        // Show the specific panel based on the selection
        if (selectedModel.equals("LG UltraGear 27GX790A (GX7)")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("LG UltraGear 27GX790A (GX7)");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/lg1.png")));
            specsLBL.setText("<html> Display Technology: OLED panel for deep blacks and vibrant colors. <br> Resolution: QHD (2560 x 1440) for sharp and detailed images. <br> Refresh Rate: Up to 480Hz with 0.03ms (GtG) response time for ultra-smooth gameplay. <br> HDR Support: VESA DisplayHDR True Black 400 for enhanced contrast and brightness. <br> Adaptive Sync: Supports NVIDIA G-SYNC and AMD FreeSyncâ¢ Premium Pro to reduce screen tearing and stuttering. <br> <html>");
        }
        else if (selectedModel.equals("LG UltraGear 34GS95QE")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("LG UltraGear 34GS95QE");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/lg2.png")));
            specsLBL.setText("<html> Display Technology: OLED panel for deep blacks and vibrant colors. <br> Resolution: Ultra WQHD (3440 x 1440) for sharp and detailed images. <br> Refresh Rate: 240Hz with 0.03ms (GtG) response time for ultra-smooth gameplay. <br> HDR Support: VESA DisplayHDR True Black 400 for enhanced contrast and brightness. <br> Adaptive Sync: Supports NVIDIA G-SYNC and AMD FreeSyncâ¢ Premium Pro to reduce screen tearing and stuttering. <br> <html>");
        }
        else if (selectedModel.equals("LG UltraGear 32GS95UE")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("LG UltraGear 32GS95UE");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/lg3.png")));
            specsLBL.setText("<html> Display Technology: OLED panel for deep blacks and vibrant colors. <br> Resolution: 4K UHD (3840 x 2160) for ultra-sharp and detailed images. <br> Refresh Rate: 240Hz with 0.03ms (GtG) response time for ultra-smooth gameplay. <br> HDR Support: VESA DisplayHDR True Black 400 for enhanced contrast and brightness. <br> Adaptive Sync: Supports NVIDIA G-SYNC and AMD FreeSyncâ¢ Premium Pro to reduce screen tearing and stuttering. <br> <html>");
        }
        else if (selectedModel.equals("LG UltraGear 27GN950")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("LG UltraGear 27GN950");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/lg4.png")));
            specsLBL.setText("<html> Display Technology: Nano IPS panel for vibrant colors and wide viewing angles. <br> Resolution: 4K UHD (3840 x 2160) for ultra-sharp and detailed images. <br> Refresh Rate: 144Hz with 1ms (GtG) response time for smooth and responsive gameplay. <br> HDR Support: VESA DisplayHDR 600 for enhanced contrast and brightness. <br> Adaptive Sync: Compatible with NVIDIA G-SYNC and supports AMD FreeSyncâ¢ Premium Pro to reduce screen tearing and stuttering. <br> <html>");
        }
        else if (selectedModel.equals("LG UltraGear 38GN950")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("LG UltraGear 38GN950");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/lg5.png")));
            specsLBL.setText("<html> Display Technology: Nano IPS panel for vibrant colors and wide viewing angles. <br> Resolution: UltraWide QHD+ (3840 x 1600) for sharp and detailed images. <br> Refresh Rate: 144Hz, overclockable to 160Hz, with 1ms (GtG) response time for ultra-smooth gameplay. <br> HDR Support: VESA DisplayHDR 600 for enhanced contrast and brightness. <br> Adaptive Sync: Compatible with NVIDIA G-SYNC and supports AMD FreeSyncâ¢ Premium Pro to reduce screen tearing and stuttering. <br> <html>");
        }
    }//GEN-LAST:event_lgmodelCBActionPerformed

    private void hpmodelCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hpmodelCBActionPerformed
        // TODO add your handling code here:
         String selectedModel = (String) hpmodelCB.getSelectedItem();
        // Show the specific panel based on the selection
        if (selectedModel.equals("HP Omen Transcend")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("HP Omen Transcend");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/hp1.png")));
            specsLBL.setText("<html> Display Technology: QD-OLED panel for deep blacks and vibrant colors. <br> Resolution: 4K UHD (3840 x 2160) for ultra-sharp and detailed images. <br> Refresh Rate: 240Hz with 0.03ms (GtG) response time for ultra-smooth gameplay. <br> HDR Support: VESA DisplayHDR True Black 400 for enhanced contrast and brightness. <br> Adaptive Sync: Compatible with NVIDIA G-SYNC and supports AMD FreeSyncâ¢ Premium Pro to reduce screen tearing and stuttering. <br> Connectivity: 1 DisplayPortâ¢ 2.1, 2 HDMI 2.1 ports, and USB-C with 140W power delivery for versatile connectivity options. <br> <html>");
        }
        else if (selectedModel.equals("HP Omen 27k")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("HP Omen 27k");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/hp2.png")));
            specsLBL.setText("<html> Display Technology: 27-inch IPS panel with vibrant colors. <br> Resolution: 4K UHD (3840 x 2160) for sharp details. <br> Refresh Rate: 144Hz with 1ms response time for smooth gameplay. <br> HDR Support: VESA DisplayHDR 400 for enhanced brightness and contrast. <br> Connectivity: HDMI 2.1, DisplayPort 1.4, USB-C, and USB-A ports for versatility. <br> <html>");
        }
        else if (selectedModel.equals("HP Omen 34c")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("HP Omen 34c");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/hp3.png")));
            specsLBL.setText("<html> Display Technology: 27-inch IPS panel with vibrant colors. <br> Resolution: 4K UHD (3840 x 2160) for sharp details. <br> Refresh Rate: 144Hz with 1ms response time for smooth gameplay. <br> HDR Support: VESA DisplayHDR 400 for enhanced brightness and contrast. <br> Connectivity: HDMI 2.1, DisplayPort 1.4, USB-C, and USB-A ports for versatility. <br> <html>");
        }
        else if (selectedModel.equals("HP Omen 25i")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("HP Omen 25i");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/hp4.png")));
            specsLBL.setText("<html> Display Technology: 24.5-inch IPS panel. <br> Resolution: Full HD (1920 x 1080). <br> Refresh Rate: 165Hz with 1ms response time. <br> HDR Support: VESA DisplayHDR 400. <br> Adaptive Sync: Supports NVIDIA G-SYNC and AMD FreeSyncâ¢ Premium Pro. <br> Connectivity: HDMI 2.0, DisplayPortâ¢ 1.4, and USB ports. <br> <html>");
        }
        else if (selectedModel.equals("HP X32 QHD Gaming Monitor")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("HP X32 QHD Gaming Monitor");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/hp5.png")));
            specsLBL.setText("<html> Display Technology: 31.5-inch IPS panel. <br> Resolution: QHD (2560 x 1440). <br> Refresh Rate: 165Hz with 1ms response time. <br> HDR Support: VESA DisplayHDR 400. <br> Adaptive Sync: Supports AMD FreeSyncâ¢ Premium. <br> Connectivity: HDMI 2.0, DisplayPortâ¢ 1.4. <br> <html>");
        }
    }//GEN-LAST:event_hpmodelCBActionPerformed

    private void asusmodelCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asusmodelCBActionPerformed
        // TODO add your handling code here:
        String selectedModel = (String) asusmodelCB.getSelectedItem();
        // Show the specific panel based on the selection
        if (selectedModel.equals("ASUS ROG Swift PG32UQX")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("ASUS ROG Swift PG32UQX");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/asus1.png")));
            specsLBL.setText("<html> Display Technology: Mini LED backlight with full-array local dimming (FALD) across 1152 independent zones, and quantum-dot technology. <br> Resolution: 4K UHD (3840 x 2160) for incredibly sharp and detailed images. <br> Refresh Rate: 144Hz for smooth and fluid gameplay. <br> HDR Support: VESA DisplayHDR 1400 certified for exceptional HDR performance with 1400 nits peak brightness. <br> Adaptive Sync: NVIDIA G-SYNC Ultimate for tear-free, stutter-free, and low-latency HDR gaming. <br> <html>");
        }
        else if (selectedModel.equals("ASUS ROG Swift 360Hz PG259QN")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("ASUS ROG Swift 360Hz PG259QN");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/asus2.png")));
            specsLBL.setText("<html> Display Technology: Fast IPS panel for exceptional response times and accurate colors. <br> Resolution: Full HD (1920 x 1080) optimized for competitive gaming. <br> Refresh Rate: 360Hz - the fastest refresh rate available for unparalleled motion clarity. <br> HDR Support: HDR10 for enhanced contrast and color. <br> Adaptive Sync: NVIDIA G-SYNC processor for incredibly smooth, tear-free gaming with ultra-low motion blur. <br> <html>");
        }
        else if (selectedModel.equals("ASUS TUF Gaming VG27AQ")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("ASUS TUF Gaming VG27AQ");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/asus3.png")));
            specsLBL.setText("<html> Display Technology: IPS panel for wide viewing angles and accurate colors. <br> Resolution: WQHD (2560 x 1440) for sharp and detailed visuals. <br> Refresh Rate: 165Hz (overclockable) for smooth and responsive gameplay. <br> HDR Support: HDR10 for enhanced contrast and a wider color range. <br> Adaptive Sync: Supports both AMD FreeSync and is NVIDIA G-SYNC Compatible for tear-free gaming. <br> <html>");
        }
        else if (selectedModel.equals("ASUS ROG Strix XG49VQ")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("ASUS ROG Strix XG49VQ");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/asus4.png")));
            specsLBL.setText("<html> Display Technology: VA panel with a 1800R curvature for immersive gaming. <br> Resolution: Double Full HD (3840 x 1080) ultrawide aspect ratio, equivalent to two 27-inch 1080p monitors side-by-side. <br> Refresh Rate: 144Hz for smooth and fluid visuals. <br> HDR Support: VESA DisplayHDR 400 certification and 90% DCI-P3 color gamut for enhanced contrast and color. <br> Adaptive Sync: AMD Radeon FreeSync 2 HDR for smooth, tear-free gaming with low latency HDR. <br> <html>");
        }
        else if (selectedModel.equals("ASUS ROG Swift OLED PG42UQ")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("ASUS ROG Swift OLED PG42UQ");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/asus5.png")));
            specsLBL.setText("<html> Display Technology: OLED panel with per-pixel self-illumination for perfect blacks and infinite contrast. <br> Resolution: 4K UHD (3840 x 2160) for incredibly sharp and detailed images. <br> Refresh Rate: 138Hz (overclocked) with 0.1ms (GTG) response time for extremely smooth and responsive gameplay. <br> HDR Support: HDR10 with 98% DCI-P3 color gamut, true 10-bit color depth and outstanding contrast <br> Adaptive Sync: NVIDIA G-SYNC Compatible and supports AMD FreeSync Premium for a tear-free gaming experience. <br> <html>");
        }
    }//GEN-LAST:event_asusmodelCBActionPerformed

    private void msimodelCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msimodelCBActionPerformed
        // TODO add your handling code here:
        String selectedModel = (String) msimodelCB.getSelectedItem();
        // Show the specific panel based on the selection
        if (selectedModel.equals("MSI MPG 321URX QD-OLED")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("MSI MPG 321URX QD-OLED");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/msi1.png")));
            specsLBL.setText("<html> Display Technology: QD-OLED (Quantum Dot OLED) panel for superior color accuracy, perfect blacks, and incredible contrast. <br> Resolution: 4K UHD (3840 x 2160) for extremely sharp and detailed images. <br> Refresh Rate: 240Hz with a blazing-fast 0.03ms (GtG) response time for ultra-smooth and responsive gaming. <br> HDR Support: VESA DisplayHDR True Black 400 and MSI's True Color technology for stunning HDR visuals. <br> Adaptive Sync: AMD FreeSync Premium Pro and likely compatible with NVIDIA G-SYNC (awaiting certification) <br> <html>");
        }
        else if (selectedModel.equals("MSI MEG 342C QD-OLED")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("MSI MEG 342C QD-OLED");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/msi2.png")));
            specsLBL.setText("<html> Display Technology: QD-OLED (Quantum Dot OLED) panel for exceptional color accuracy, perfect blacks, and infinite contrast. <br> Resolution: UWQHD (3440 x 1440) for a sharp and immersive ultrawide gaming experience. <br> Refresh Rate: 175Hz with a 0.03ms (GtG) response time for incredibly smooth and responsive gameplay. <br> HDR Support: VESA DisplayHDR True Black 400 for stunning HDR visuals with deep blacks and bright highlights. <br> Adaptive Sync: AMD FreeSync Premium Pro and likely compatible with NVIDIA G-SYNC (awaiting certification) <br> <html>");
        }
        else if (selectedModel.equals("MSI Optix MAG274QRF-QD")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("MSI Optix MAG274QRF-QD");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/msi3.png")));
            specsLBL.setText("<html> Display Technology: Rapid IPS panel with Quantum Dot technology for enhanced color vibrancy and wide viewing angles. <br> Resolution: WQHD (2560 x 1440) for sharp and detailed visuals. <br> Refresh Rate: 165Hz with a 1ms (GtG) response time for smooth and responsive gaming. <br> HDR Support: HDR Ready for improved contrast and a wider color range. <br> Adaptive Sync: NVIDIA G-SYNC Compatible, reducing screen tearing and stuttering. <br> <html>");
        }
        else if (selectedModel.equals("MSI Optix MPG341CQR")) {
            modeldetailsPNL.setVisible(true);
            modeltitleLBL.setText("MSI Optix MPG341CQR");
            modelimgLBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/monitorhub/resources/monitor_images/msi4.png")));
            specsLBL.setText("<html> Display Technology: VA panel with a 1800R curvature for an immersive gaming experience. <br> Resolution: UWQHD (3440 x 1440) for a sharp and expansive ultrawide view. <br> Refresh Rate: 144Hz for smooth and fluid gameplay. <br> HDR Support: VESA Certified DisplayHDR 400 for enhanced contrast and brightness. <br> Adaptive Sync: AMD FreeSync for tear-free gaming, and unofficially G-SYNC compatible. <br> <html>");
        }

    }//GEN-LAST:event_msimodelCBActionPerformed

    private void monitorhubLOGOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_monitorhubLOGOMouseClicked
        // TODO add your handling code here:
        aboutusPNL.setVisible(true);
        homePNL.setVisible(false);
        brandsPNL.setVisible(false);
        salesPNL.setVisible(false);
        stocksPNL.setVisible(false);
        
        aboutusBTN.setForeground(blue);
        homeBTN.setForeground(black);
        brandsBTN.setForeground(black);
        salesBTN.setForeground(black);
        stocksBTN.setForeground(black);
    }//GEN-LAST:event_monitorhubLOGOMouseClicked

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
        // TODO add your handling code here:
        String modelName = (String) modelnameCB.getSelectedItem();
        String monitorType = (String) monitortypeCB.getSelectedItem();

        DefaultTableModel model = (DefaultTableModel) stocksTBL.getModel();

        // Check if the model name and monitor type combination exists
        if (!ValidationUtil.modelTypeExists(modelName, monitorType, model)) {
            JOptionPane.showMessageDialog(this, "The selected Model Name and Monitor Type are not listed.", "Delete Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Ask for confirmation before deleting
        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete the selected Stock?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirmation == JOptionPane.YES_OPTION) {
            // Perform deletion
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 1).toString().equalsIgnoreCase(modelName) &&
                    model.getValueAt(i, 2).toString().equalsIgnoreCase(monitorType)) {
                    model.removeRow(i);
                    JOptionPane.showMessageDialog(this, "Selected Model Name and Monitor Type deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    return; // Exit the loop after deleting the first matching row
                }
            }
        }
    }//GEN-LAST:event_deleteBTNActionPerformed

    private void priceTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priceTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priceTFActionPerformed

    private void jLabel20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel20MouseClicked

    private void jLabel47MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel47MouseClicked
        // TODO add your handling code here:
        homePNL.setVisible(false);
        salesPNL.setVisible(true);
        stocksPNL.setVisible(false);
        aboutusPNL.setVisible(false);
        brandsPNL.setVisible(false);
        
        aboutusBTN.setForeground(black);
        homeBTN.setForeground(black);
        brandsBTN.setForeground(black);
        salesBTN.setForeground(blue);
        stocksBTN.setForeground(black);
    }//GEN-LAST:event_jLabel47MouseClicked

    private void nextpageBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextpageBTNActionPerformed
        // TODO add your handling code here:
        nextpageBTN.setVisible(false);
        previouspageBTN.setVisible(true);
        aboutusLBL.setText("<html>   Why Choose Monitor Hub?<br>  <br>   We take pride in being the best inventory management company on the market!<br>   With our cutting-edge technology and user-friendly interface, Monitor Hub simplifies<br>   the process of managing monitor stocks like never before.<br>   <br>   Our platform is trusted by countless businesses for its reliability, speed, and accuracy.<br>   From small enterprises to large-scale operations, we cater to all inventory needs<br>   with unmatched efficiency.<br>   <br>   Monitor Hub ensures:<br>   - Real-time inventory updates to prevent stock shortages or overstocking.<br>   - Seamless integration of different monitor types and brands.<br>   - Robust data security to protect your valuable information.<br>   - Detailed analytics for smarter decision-making.<br>   <br>   We understand the challenges of managing inventory, and that's why Monitor Hub<br>   is designed to save your time and maximize productivity.<br>   <br>   Let us help you take your business to the next level!<br>   Choose Monitor Hub â Because your success is our mission!<br>   </html> ");
    }//GEN-LAST:event_nextpageBTNActionPerformed

    private void previouspageBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previouspageBTNActionPerformed
        // TODO add your handling code here:
        previouspageBTN.setVisible(false);
        nextpageBTN.setVisible(true);
        aboutusLBL.setText("<html> Our Inventory Management System is designed to efficiently handle stocks of monitors<br>   from various brands, catering to different monitor types and user preferences.<br>   <br>   At Monitor Hub, we aim to streamline your inventory processes,<br>   providing accurate tracking and management of large datasets with ease.<br>   Our system ensures real-time updates and robust data handling capabilities.<br>   <br>   Whether you're managing gaming monitors, professional displays,<br>   or standard office screens, Monitor Hub has you covered.<br>   Our commitment to innovation and efficiency makes us the ideal choice<br>   for businesses and individuals alike.<br>   <br>   Thank you for choosing Monitor Hub â Your trusted partner in monitor inventory management!<br>   <html>");
    }//GEN-LAST:event_previouspageBTNActionPerformed

    private void initializeData() {
    monitorList = new LinkedList<>();

    // Adding sample monitors
    addMonitorStock(new MonitorDetails("SAMSUNG", "Samsung Odyssey 3D", "Brand New", 10, "2160p", 450));
    addMonitorStock(new MonitorDetails("LG", "LG UltraGear 34GS95QE", "Brand New", 5, "2160p", 350));
    addMonitorStock(new MonitorDetails("MSI", "MSI MEG 342C QD-OLED", "Brand New", 3, "2160p", 150));
    addMonitorStock(new MonitorDetails("HP", "HP X32 QHD Gaming Monitor", "Brand New", 8, "2160p", 550));
    addMonitorStock(new MonitorDetails("ASUS", "ASUS ROG Swift 360Hz PG259QN", "Brand New", 12, "2160p", 850));
    }
    
    private void startProgress() {
        javax.swing.SwingWorker<Void, Integer> worker;
        worker = new javax.swing.SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                for (int i = 0; i <= 100; i++) {
                    Thread.sleep(6); // Simulated delay for progress bar
                    publish(i); // Publish progress
                }
                return null;
            }

            @Override
            protected void process(java.util.List<Integer> chunks) {
                int progress = chunks.get(chunks.size() - 1);
                loadingBar.setValue(progress);
                
                // Update progressTXT based on progress
                if (progress <= 10) {
                    progressTXT.setText("Loading...");
                } else if (progress <= 30) {
                    progressTXT.setText("Loading Resources...");
                } else if (progress <= 60) {
                    progressTXT.setText("Maintaining Stocks...");
                } else if (progress <= 90) {
                    progressTXT.setText("Creating Login Environment...");
                } else {
                    progressTXT.setText("Completed!");
                }
                
            }

            @Override
            protected void done() {
                loadScreen("LoginScreen"); // Switch to login screen
            }
        };
        worker.execute(); // Start the worker thread
    }
    


    // Method to add monitor data and populate the table
    private void addMonitorStock(MonitorDetails monitor) {
        monitorList.add(monitor);
        DefaultTableModel model = (DefaultTableModel) stocksTBL.getModel();
        model.addRow(new Object[]{
            monitor.getBrandName(), monitor.getModelName(), monitor.getMonitorType(),
            monitor.getStock(), monitor.getResolution(), monitor.getPrice()
        });
    }
    
    private void loadScreen(String screenName) {
        cardLayout.show(getContentPane(), screenName);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MonitorHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MonitorHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MonitorHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MonitorHub.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MonitorHub().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutusBTN;
    private javax.swing.JLabel aboutusLBL;
    private javax.swing.JPanel aboutusPNL;
    private javax.swing.JButton addBTN;
    private javax.swing.JCheckBox agreeCB;
    private javax.swing.JButton asusBTN;
    private javax.swing.JComboBox<String> asusmodelCB;
    private javax.swing.JComboBox<String> brandnameCB;
    private javax.swing.JButton brandsBTN;
    private javax.swing.JPanel brandsPNL;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JLabel errorTXT;
    private javax.swing.JButton exitBTN;
    private javax.swing.JButton forgotBTN;
    private javax.swing.JButton homeBTN;
    private javax.swing.JPanel homePNL;
    private javax.swing.JButton hpBTN;
    private javax.swing.JComboBox<String> hpmodelCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton lgBTN;
    private javax.swing.JComboBox<String> lgmodelCB;
    private javax.swing.JPanel loading;
    private javax.swing.JProgressBar loadingBar;
    private javax.swing.JPanel login;
    private javax.swing.JButton loginBTN;
    private javax.swing.JButton logout;
    private javax.swing.JPanel main;
    private javax.swing.JLabel mainnavBG;
    private javax.swing.JPanel modeldetailsPNL;
    private javax.swing.JLabel modelimgLBL;
    private javax.swing.JComboBox<String> modelnameCB;
    private javax.swing.JLabel modeltitleLBL;
    private javax.swing.JLabel monitorhubLOGO;
    private javax.swing.JComboBox<String> monitortypeCB;
    private javax.swing.JButton msiBTN;
    private javax.swing.JComboBox<String> msimodelCB;
    private javax.swing.JPanel navPNL;
    private javax.swing.JButton nextpageBTN;
    private javax.swing.JPasswordField passwordTF;
    private javax.swing.JButton previouspageBTN;
    private javax.swing.JTextField priceTF;
    private javax.swing.JLabel progressTXT;
    private javax.swing.JComboBox<String> resolutionCB;
    private javax.swing.JButton salesBTN;
    private javax.swing.JPanel salesPNL;
    private javax.swing.JButton samsungBTN;
    private javax.swing.JComboBox<String> samsungmodelCB;
    private javax.swing.JLabel specsLBL;
    private javax.swing.JButton stocksBTN;
    private javax.swing.JPanel stocksPNL;
    private javax.swing.JScrollPane stocksSP;
    private javax.swing.JTable stocksTBL;
    private javax.swing.JTextField stocksTF;
    private javax.swing.JButton updateBTN;
    private javax.swing.JTextField usernameTF;
    // End of variables declaration//GEN-END:variables
}
